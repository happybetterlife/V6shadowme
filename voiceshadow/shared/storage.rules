rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Users can only access their own files
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Voice model files - users can only access files from their own models
    match /voice_models/{userId}/{modelId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Voice samples - users can only access samples from their own models
    match /voice_samples/{userId}/{modelId}/{sampleId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Generated audio files - users can only access their own generated files
    match /generated/{userId}/{generationId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Shadowing session files - users can only access their own session files
    match /shadowing_sessions/{userId}/{sessionId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Temporary files - users can only access their own temp files
    match /temp/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Auto-delete temp files after 24 hours
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public assets - read access for all authenticated users
    match /public/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if false; // No public writes
    }
    
    // Admin files - only admin users can access
    match /admin/{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.admin == true;
    }
    
    // File size limits
    function isFileSizeValid() {
      return request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }
    
    // Audio file validation
    function isAudioFile() {
      return request.resource.contentType.matches('audio/.*');
    }
    
    // Image file validation
    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    // Apply file size and type validation for uploads
    match /{allPaths=**} {
      allow write: if isFileSizeValid() && (isAudioFile() || isImageFile());
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
